{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww34360\viewh21600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs46 \cf0 Given a bipartite graph, with U and S nodes, select the largest possible subset of edges that satisfy the constraints: U nodes have a maximum degree of 1, S nodes have maximum degree of 32, and no two connected U nodes of the same color can be connected such that they differ by 10 or less degrees. Also, determine colors for each of the edges in the subset to satisfy edge conflicts.\
\
For every U node, iterate through all the possible S nodes and colors to find one where there is no conflicts. If there are no available assignments, then we can do the following: find out how many conflicts there are between all of the options, and choose the option in which there are the fewest conflicts in which we remove the conflicting assignments. The users that were removed should go at the end of the queue of nodes that should be attempted to be added.\
\
We only want to remove X number of assignments, if it results in more than X amount of assignments to be able to be added.\
\
We know there exists a set of edges and colors that satisfy the constraints, \
\
\
\
\
}